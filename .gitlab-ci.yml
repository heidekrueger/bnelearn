stages:
  - test
  - lint
  - deploy_docs

test:
  stage: test
  script:
  # this assumes everything is already installed and we are able to load the correct conda env.
  # when setting up the runner user for the first time, make sure it finds the global conda on the machine
  #- /opt/anaconda/anaconda3/bin/conda init
  - export PATH="/opt/anaconda/anaconda3/bin:$PATH"
  - source activate bnelearn
  - conda list pytorch
  # -n4 adds parallelization across cpus to the test. Currently around 25% speedup of test-suite.
  # (some tests are gpu bound, this will create multiple processes on same gpu.)
  # Gives somewhat less readible output when tests have failed, so disabled for now as it only
  # saves us around 10-15 seconds.
  # -rxXs: add output about skipped, xfailed, xpassed tests.
  - pytest -rxXs --cov-report term-missing --cov=bnelearn --junitxml=testreport.xml

  artifacts:
    when: always
    reports:
      junit: testreport.xml
    expire_in: 6 months

lint:
  stage: lint
  script:
    # requires that pylint , pylint-exit and pylint2codeclimate are installed.
    # pylint-exit used as below modifies pylint exit code to prevent false-positive pipeline fails.
  - export PATH="/opt/anaconda/anaconda3/bin:$PATH"
  - source activate bnelearn
  - pylint --exit-zero -f colorized bnelearn | tee pylint.txt
  - score=$(sed -n 's/^Your code has been rated at \([-0-9.]*\)\/.*/\1/p' pylint.txt)
  - pylint --exit-zero -j 8 --output-format=pylint_gitlab.GitlabCodeClimateReporter bnelearn/* > codeclimate.json
  - echo "pylint_score $score" > metrics.txt
  - echo "Pylint score was $score"
  -  anybadge -l "pylint score" -v $score -f lint_badge.svg -c blue
  # applying this workaround to upload artifacts https://stackoverflow.com/questions/56545429/gitlab-ci-build-not-uploading-artifacts-of-codeception/56675792#56675792
  #- echo ${CI_PROJECT_DIR}
  after_script:
  - mkdir ${CI_PROJECT_DIR}/artifacts
  - cp metrics.txt codeclimate.json lint_badge.svg ${CI_PROJECT_DIR}/artifacts
  artifacts:
    reports:
      codequality: ${CI_PROJECT_DIR}/artifacts/codeclimate.json
      metrics: ${CI_PROJECT_DIR}/artifacts/metrics.txt
    paths:
    - ${CI_PROJECT_DIR}/artifacts/codeclimate.json
    - ${CI_PROJECT_DIR}/artifacts/metrics.txt
    - ${CI_PROJECT_DIR}/artifacts/lint_badge.svg
    expire_in: 6 months

  # get the json with all badge urls via API and regex the id of the badge with 'blue.svg' in it
  # this works with a personal access token but doesn't seem to work with deploy token / project token or
  # deploy key. thus not doing this for now for security purposes.
  #- json_badge_info=$(curl -H "PRIVATE-TOKEN:$API_TOKEN" -X GET https://gitlab.lrz.de/api/v4/projects/$CI_PROJECT_ID/badges)
  #- pylint_badge_id=$(expr match "$json_badge_info" '.*https[^"]*-blue\.svg\",\"id\":\([0-9]\+\),')
  #- echo $pylint_badge_id

  #- badge_url=https://img.shields.io/badge/lint%20score-$score-blue.svg
  #- >-
  #      curl https://gitlab.lrz.de/api/v4/projects/$CI_PROJECT_ID/badges/$pylint_badge_id
  #      -X PUT
  #      -H "PRIVATE-TOKEN: $API_TOKEN"
  #      -H "Content-Type: application/json"
  #      -d '{"image_url": "'"$badge_url"'"}'
#
  #artifacts:
  #  paths:
  #    - pylint.txt

deploy_docs:
  only:
    refs:
      - master
  stage: deploy_docs
  script:
  - export PATH="/opt/anaconda/anaconda3/bin:$PATH"
  - source activate bnelearn
  - cp -r docs/* ~/docs-bnelearn
  - cp -r bnelearn ~/docs-bnelearn
  - cd ~/docs-bnelearn
  - sphinx-apidoc -f -o . bnelearn
  - make html