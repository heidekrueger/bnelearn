stages:
  - install_env
  - test
  - lint
  - deploy_docs

install_env:
  stage: install_env
  script:
  - source /opt/anaconda/anaconda3/etc/profile.d/conda.sh
  - which python
  - which conda
  - conda env remove -n bnelearn-test
  - conda create -n bnelearn-test python=3.9
  - conda activate bnelearn-test
  - which python
  - which pip
  - pip install -r requirements.txt
  - pip install -e .

test:
  stage: test
  #needs: [install_env]
  script:
  # this assumes everything is already installed and we are able to load the correct conda env 
  # as created in the install_env step.
  - source /opt/anaconda/anaconda3/etc/profile.d/conda.sh
  - which conda
  - conda activate bnelearn-test
  - which python
  # -n4 adds parallelization across cpus to the test. Currently around 25% speedup of test-suite.
  # (some tests are gpu bound, this will create multiple processes on same gpu.)
  # Gives somewhat less readible output when tests have failed, so disabled for now as it only
  # saves us around 10-15 seconds.
  # -rxXs: add output about skipped, xfailed, xpassed tests.
  # don't run pytest directly -- pip doesn't install the command, and then you might fall
  # back to pytest in the user's default env without pytorch
  - python -m pytest -rxXs --cov-report term-missing --cov=bnelearn --junitxml=testreport.xml

  artifacts:
    when: always
    reports:
      junit: testreport.xml
    expire_in: 6 months

lint:
  stage: lint
  #needs: [install_env]
  script:
    # requires that pylint , pylint-exit and pylint2codeclimate are installed.
    # pylint-exit used as below modifies pylint exit code to prevent false-positive pipeline fails.
  - source /opt/anaconda/anaconda3/etc/profile.d/conda.sh
  - conda activate bnelearn-test
  - which python
  - which pylint
  - python -m pylint --exit-zero -f colorized bnelearn | tee pylint.txt
  - score=$(sed -n 's/^Your code has been rated at \([-0-9.]*\)\/.*/\1/p' pylint.txt)
  - python -m pylint --exit-zero -j 8 --output-format=pylint_gitlab.GitlabCodeClimateReporter bnelearn/* > codeclimate.json
  - echo "pylint_score $score" > metrics.txt
  - echo "Pylint score was $score"
  - python -m anybadge -l "pylint score" -v $score -f lint_badge.svg -c blue
  # applying this workaround to upload artifacts https://stackoverflow.com/questions/56545429/gitlab-ci-build-not-uploading-artifacts-of-codeception/56675792#56675792
  #- echo ${CI_PROJECT_DIR}
  after_script:
  - mkdir ${CI_PROJECT_DIR}/artifacts
  - cp metrics.txt codeclimate.json lint_badge.svg ${CI_PROJECT_DIR}/artifacts
  artifacts:
    reports:
      codequality: ${CI_PROJECT_DIR}/artifacts/codeclimate.json
      metrics: ${CI_PROJECT_DIR}/artifacts/metrics.txt
    paths:
    - ${CI_PROJECT_DIR}/artifacts/codeclimate.json
    - ${CI_PROJECT_DIR}/artifacts/metrics.txt
    - ${CI_PROJECT_DIR}/artifacts/lint_badge.svg
    expire_in: 6 months

deploy_docs:
  only:
   refs:
     - master
  stage: deploy_docs
  script:
  # init the shell for conda activate
  - source /opt/anaconda/anaconda3/etc/profile.d/conda.sh
  - which conda
  ## install new conda env for docs
  - conda env remove -n bnelearndocs
  - conda create -n bnelearndocs python=3.9 pip
  - conda activate bnelearndocs
  - which python
  - which pip
  - pip install -r requirements.txt
  - pip install -e .
  ## move required doc files to location of docs server
  - cp -r docs/* ~/docs-bnelearn
  - cp -r bnelearn ~/docs-bnelearn
  ## build the documentation
  - cd ~/docs-bnelearn
  - sphinx-apidoc -f -o . bnelearn
  - make html
  #=== (Re)start docs server ===
  - chmod +x run_docs_server.sh
  # kill the session if it exists (but don't throw an error if it doesn't)
  - tmux kill-session -t bnelearndocs || true
  # run the docs server in a new tmux session.
  - tmux new -s bnelearndocs -d 'sh ./run_docs_server.sh'